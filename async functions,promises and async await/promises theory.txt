In JavaScript, promises are a programming pattern and an object that represents the eventual completion or failure of an asynchronous operation and its resulting value. They provide a more structured way of dealing with asynchronous code compared to traditional callback functions.

A promise has three states:

1. **Pending:**
   - Initial state; the promise is neither fulfilled nor rejected.

2. **Fulfilled (Resolved):**
   - The asynchronous operation completed successfully, and the promise has a resulting value.

3. **Rejected:**
   - The asynchronous operation failed, and the promise has a reason for the failure.

The syntax for creating a promise looks like this:

```javascript
const myPromise = new Promise((resolve, reject) => {
  // Async operation or logic

  if (/* Operation is successful */) {
    resolve(result); // Fulfill the promise with a result
  } else {
    reject(error); // Reject the promise with an error
  }
});
```

Here's a breakdown of the components:

- The `Promise` constructor takes a function with two arguments: `resolve` and `reject`.
- Inside the function, you perform some asynchronous operation.
- If the operation is successful, you call `resolve(result)` with the result.
- If there's an error, you call `reject(error)` with an error message.

Consuming a promise is typically done using `.then()` and `.catch()` methods:

```javascript
myPromise
  .then(result => {
    // Handle the fulfilled result
    console.log(result);
  })
  .catch(error => {
    // Handle the rejection reason
    console.error(error);
  });
```

Here are some key points about promises:

1. **Chaining:**
   - Promises can be chained using `.then()` to create a sequence of asynchronous operations.
   - Each `.then()` returns a new promise, allowing for a more readable and modular asynchronous code structure.

2. **Error Handling:**
   - Errors can be handled using the `.catch()` method, which is called if any promise in the chain is rejected.

3. **Promise.all():**
   - Allows you to wait for multiple promises to fulfill. It returns a new promise that is fulfilled with an array of fulfillment values when all of the input promises are fulfilled.

4. **Promise.race():**
   - Returns a promise that fulfills or rejects as soon as one of the input promises fulfills or rejects.

Promises provide a cleaner and more maintainable way to work with asynchronous code compared to nested callbacks, often referred to as "callback hell." Promises are widely used in modern JavaScript, and they form the foundation for more advanced asynchronous patterns like async/await.